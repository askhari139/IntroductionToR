return (mean(S[T,]))
}
eg <- expand.grid(
Phi1 = c(0, 0.2, 0.6),
Phi2 = c(0, 0.2, 0.6),
# varying some:
BP = seq(0, 1, by = 0.05),
BM = seq(0, 1, by = 0.05),
# holding some constant:
L = 0.3,
N = 30,
# Columns for outcomes:
out = NA
)
profvis::profvis({dVM(eg$Phi1[i], eg$Phi2[i], eg$L[i], eg$BP[i], eg$BM[i], eg$N[i])})
dVM <- function (phi1, phi2, l, bp, bm, N)
{
#parameters
lp <- l #lambda plus
lm <- l #lambda minus
dt <- 0.01 #incremental time steps
nt <- 10
T <- nt/dt
r <- 1 #number of runs
a <- 1 #amplitude of stochasticity
#define variables
n <- numeric(T) #plus population density
m <- numeric(T) #minus population density
M <- numeric(T) #magnetization
x <- numeric(T) #l++ link
y <- numeric(T) #l+- link
z <- numeric(T) #l-- link
U <- array (dim = c(T, 22, 4)) #N * displacement vector array with T time steps, 22 possible interactions, 4 components
P <- matrix(nrow = T, ncol = 22) #probability matrix
S <- matrix(nrow=T, ncol=r)
#initialise variables
n[1] <- 0.5
m[1] <- 1 - n[1]
M[1] <- n[1] - m[1]
x[1] <- 5*n[1]*n[1]
z[1] <- 5*m[1]*m[1]
y[1] <- 2*5*m[1]*n[1]
L <- x[1]+y[1]+z[1] #total number of links
#set preference parameters
Bp <- bp*n[1]
Bm <- bm*m[1]
#defining a matrix sum function
Msum <- function(a,b)
{
s = 0
for (i in 1:22)
{
s <- s + a[i]*b[i]
}
return(s)
} ##Note: This can be vectorized
# Msum <- function(a,b)
# {
#   sum(a*b)
# }
for (i in 1:r)
{
for (t in 1:T)
{
if ((M[t] <= 1) & (M[t] >= -1) & (x[t] >= 0) & (y[t] >= 0) & (z[t] >= 0) & (x[t] <= L) & (y[t] <= L) & (z[t] <= L))
{
#first assign by width the component for each interaction
U[t, 1,] <- c(0,1,-1,0)
U[t, 2,] <- c(0,0,0,0)
U[t, 3,] <- c(0,0,0,0)
U[t, 4,] <- c(0,0,0,0)
U[t, 5,] <- c(-2*n[t], x[t]-y[t], -x[t], y[t])/n[t]
U[t, 6,] <- c(0,-1,1,0)
U[t, 7,] <- c(0,0,0,0)
U[t, 8,] <- c(-2*n[t], x[t]-y[t], -x[t], y[t])/n[t]
U[t, 9,] <- c(0,0,0,0)
U[t, 10,] <- c(0,0,0,0)
U[t, 11,] <- c(-2*n[t], x[t]-y[t], -x[t], y[t])/n[t]
U[t, 12,] <- c(0,-1,0,1)
U[t, 13,] <- c(0,0,0,0)
U[t, 14,] <- c(2*m[t], z[t]-y[t], y[t], -z[t])/m[t]
U[t, 15,] <- c(0,0,0,0)
U[t, 16,] <- c(0,0,0,0)
U[t, 17,] <- c(2*m[t], z[t]-y[t], y[t], -z[t])/m[t]
U[t, 18,] <- c(0,1,0,-1)
U[t, 19,] <- c(0,0,0,0)
U[t, 20,] <- c(0,0,0,0)
U[t, 21,] <- c(0,0,0,0)
U[t, 22,] <- c(2*m[t], z[t]-y[t], y[t], -z[t])/m[t]
#assign probabilities to each time step
P[t,1] <- (1 - Bp - Bm)*phi1*n[t]*m[t]*x[t]/(x[t]+y[t])
P[t,2] <- (1 - Bp - Bm)*phi1*n[t]**2*x[t]/(x[t]+y[t])
P[t,3] <- (1 - Bp - Bm)*(1-phi1)*n[t]*x[t]/(x[t]+y[t])
P[t,4] <- Bp*n[t]*x[t]/(x[t]+y[t])
P[t,5] <- Bm*n[t]*x[t]/(x[t]+y[t])
P[t,6] <- (1 - Bp - Bm)*phi2*n[t]**2*y[t]/(x[t]+y[t])
P[t,7] <- (1 - Bp - Bm)*phi2*n[t]*m[t]*y[t]/(x[t]+y[t])
P[t,8] <- (1 - Bp - Bm)*(1-phi2)*(1-lp)*n[t]*y[t]/(x[t]+y[t])
P[t,9] <- (1 - Bp - Bm)*(1-phi2)*lp*n[t]*y[t]/(x[t]+y[t])
P[t,10] <- Bp*y[t]/(x[t]+y[t])
P[t,11] <- Bm*y[t]/(x[t]+y[t])
P[t,12] <- (1 - Bp - Bm)*phi2*m[t]**2*y[t]/(z[t]+y[t])
P[t,13] <- (1 - Bp - Bm)*phi2*n[t]*m[t]*y[t]/(z[t]+y[t])
P[t,14] <- (1 - Bp - Bm)*(1-phi2)*(1-lm)*m[t]*y[t]/(z[t]+y[t])
P[t,15] <- (1 - Bp - Bm)*(1-phi2)*lm*m[t]*y[t]/(z[t]+y[t])
P[t,16] <-  Bm*y[t]/(z[t]+y[t])
P[t,17] <-  Bp*y[t]/(z[t]+y[t])
P[t,18] <- (1 - Bp - Bm)*phi1*n[t]*m[t]*z[t]/(z[t]+y[t])
P[t,19] <- (1 - Bp - Bm)*phi1*m[t]**2*z[t]/(z[t]+y[t])
P[t,20] <- (1 - Bp - Bm)*(1-phi1)*m[t]*z[t]/(z[t]+y[t])
P[t,21] <- Bm*m[t]*z[t]/(z[t]+y[t])
P[t,22] <- Bp*m[t]*z[t]/(z[t]+y[t])
if (t < T)
{
#displacement vector equations
M[t+1] <- M[t] + dt*Msum(U[t,,1],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,1]/N, sqrt(P[t,]))/sqrt(N)
x[t+1] <- x[t] + dt*Msum(U[t,,3],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,3]/N, sqrt(P[t,]))/sqrt(N)
y[t+1] <- y[t] + dt*Msum(U[t,,2],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,2]/N, sqrt(P[t,]))/sqrt(N)
z[t+1] <- z[t] + dt*Msum(U[t,,4],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,4]/N, sqrt(P[t,]))/sqrt(N)
n[t+1] <- (M[t+1]+1)/2
m[t+1] <- 1 - n[t+1]
}
}
else
{
if (t < T)
{
M[t+1] <- M[t]
n[t+1] <- n[t]
m[t+1] <- m[t]
x[t+1] <- x[t]
y[t+1] <- y[t]
z[t+1] <- z[t]
}
}
}
S[,i] <- M
}
return (mean(S[T,]))
}
eg <- expand.grid(
Phi1 = c(0, 0.2, 0.6),
Phi2 = c(0, 0.2, 0.6),
# varying some:
BP = seq(0, 1, by = 0.05),
BM = seq(0, 1, by = 0.05),
# holding some constant:
L = 0.3,
N = 30,
# Columns for outcomes:
out = NA
)
eg$out[i] <- dVM(eg$Phi1[i], eg$Phi2[i], eg$L[i], eg$BP[i], eg$BM[i], eg$N[i])
dVM <- function (phi1, phi2, l, bp, bm, N)
{
#parameters
lp <- l #lambda plus
lm <- l #lambda minus
dt <- 0.01 #incremental time steps
nt <- 100
T <- nt/dt
r <- 1 #number of runs
a <- 1 #amplitude of stochasticity
#define variables
n <- numeric(T) #plus population density
m <- numeric(T) #minus population density
M <- numeric(T) #magnetization
x <- numeric(T) #l++ link
y <- numeric(T) #l+- link
z <- numeric(T) #l-- link
U <- array (dim = c(T, 22, 4)) #N * displacement vector array with T time steps, 22 possible interactions, 4 components
P <- matrix(nrow = T, ncol = 22) #probability matrix
S <- matrix(nrow=T, ncol=r)
#initialise variables
n[1] <- 0.5
m[1] <- 1 - n[1]
M[1] <- n[1] - m[1]
x[1] <- 5*n[1]*n[1]
z[1] <- 5*m[1]*m[1]
y[1] <- 2*5*m[1]*n[1]
L <- x[1]+y[1]+z[1] #total number of links
#set preference parameters
Bp <- bp*n[1]
Bm <- bm*m[1]
#defining a matrix sum function
Msum <- function(a,b)
{
s = 0
for (i in 1:22)
{
s <- s + a[i]*b[i]
}
return(s)
} ##Note: This can be vectorized
# Msum <- function(a,b)
# {
#   sum(a*b)
# }
for (i in 1:r)
{
for (t in 1:T)
{
if ((M[t] <= 1) & (M[t] >= -1) & (x[t] >= 0) & (y[t] >= 0) & (z[t] >= 0) & (x[t] <= L) & (y[t] <= L) & (z[t] <= L))
{
#first assign by width the component for each interaction
U[t, 1,] <- c(0,1,-1,0)
U[t, 2,] <- c(0,0,0,0)
U[t, 3,] <- c(0,0,0,0)
U[t, 4,] <- c(0,0,0,0)
U[t, 5,] <- c(-2*n[t], x[t]-y[t], -x[t], y[t])/n[t]
U[t, 6,] <- c(0,-1,1,0)
U[t, 7,] <- c(0,0,0,0)
U[t, 8,] <- c(-2*n[t], x[t]-y[t], -x[t], y[t])/n[t]
U[t, 9,] <- c(0,0,0,0)
U[t, 10,] <- c(0,0,0,0)
U[t, 11,] <- c(-2*n[t], x[t]-y[t], -x[t], y[t])/n[t]
U[t, 12,] <- c(0,-1,0,1)
U[t, 13,] <- c(0,0,0,0)
U[t, 14,] <- c(2*m[t], z[t]-y[t], y[t], -z[t])/m[t]
U[t, 15,] <- c(0,0,0,0)
U[t, 16,] <- c(0,0,0,0)
U[t, 17,] <- c(2*m[t], z[t]-y[t], y[t], -z[t])/m[t]
U[t, 18,] <- c(0,1,0,-1)
U[t, 19,] <- c(0,0,0,0)
U[t, 20,] <- c(0,0,0,0)
U[t, 21,] <- c(0,0,0,0)
U[t, 22,] <- c(2*m[t], z[t]-y[t], y[t], -z[t])/m[t]
#assign probabilities to each time step
P[t,1] <- (1 - Bp - Bm)*phi1*n[t]*m[t]*x[t]/(x[t]+y[t])
P[t,2] <- (1 - Bp - Bm)*phi1*n[t]**2*x[t]/(x[t]+y[t])
P[t,3] <- (1 - Bp - Bm)*(1-phi1)*n[t]*x[t]/(x[t]+y[t])
P[t,4] <- Bp*n[t]*x[t]/(x[t]+y[t])
P[t,5] <- Bm*n[t]*x[t]/(x[t]+y[t])
P[t,6] <- (1 - Bp - Bm)*phi2*n[t]**2*y[t]/(x[t]+y[t])
P[t,7] <- (1 - Bp - Bm)*phi2*n[t]*m[t]*y[t]/(x[t]+y[t])
P[t,8] <- (1 - Bp - Bm)*(1-phi2)*(1-lp)*n[t]*y[t]/(x[t]+y[t])
P[t,9] <- (1 - Bp - Bm)*(1-phi2)*lp*n[t]*y[t]/(x[t]+y[t])
P[t,10] <- Bp*y[t]/(x[t]+y[t])
P[t,11] <- Bm*y[t]/(x[t]+y[t])
P[t,12] <- (1 - Bp - Bm)*phi2*m[t]**2*y[t]/(z[t]+y[t])
P[t,13] <- (1 - Bp - Bm)*phi2*n[t]*m[t]*y[t]/(z[t]+y[t])
P[t,14] <- (1 - Bp - Bm)*(1-phi2)*(1-lm)*m[t]*y[t]/(z[t]+y[t])
P[t,15] <- (1 - Bp - Bm)*(1-phi2)*lm*m[t]*y[t]/(z[t]+y[t])
P[t,16] <-  Bm*y[t]/(z[t]+y[t])
P[t,17] <-  Bp*y[t]/(z[t]+y[t])
P[t,18] <- (1 - Bp - Bm)*phi1*n[t]*m[t]*z[t]/(z[t]+y[t])
P[t,19] <- (1 - Bp - Bm)*phi1*m[t]**2*z[t]/(z[t]+y[t])
P[t,20] <- (1 - Bp - Bm)*(1-phi1)*m[t]*z[t]/(z[t]+y[t])
P[t,21] <- Bm*m[t]*z[t]/(z[t]+y[t])
P[t,22] <- Bp*m[t]*z[t]/(z[t]+y[t])
if (t < T)
{
#displacement vector equations
M[t+1] <- M[t] + dt*Msum(U[t,,1],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,1]/N, sqrt(P[t,]))/sqrt(N)
x[t+1] <- x[t] + dt*Msum(U[t,,3],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,3]/N, sqrt(P[t,]))/sqrt(N)
y[t+1] <- y[t] + dt*Msum(U[t,,2],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,2]/N, sqrt(P[t,]))/sqrt(N)
z[t+1] <- z[t] + dt*Msum(U[t,,4],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,4]/N, sqrt(P[t,]))/sqrt(N)
n[t+1] <- (M[t+1]+1)/2
m[t+1] <- 1 - n[t+1]
}
}
else
{
if (t < T)
{
M[t+1] <- M[t]
n[t+1] <- n[t]
m[t+1] <- m[t]
x[t+1] <- x[t]
y[t+1] <- y[t]
z[t+1] <- z[t]
}
}
}
S[,i] <- M
}
return (mean(S[T,]))
}
eg <- expand.grid(
Phi1 = c(0, 0.2, 0.6),
Phi2 = c(0, 0.2, 0.6),
# varying some:
BP = seq(0, 1, by = 0.05),
BM = seq(0, 1, by = 0.05),
# holding some constant:
L = 0.3,
N = 30,
# Columns for outcomes:
out = NA
)
eg$out[i] <- dVM(eg$Phi1[i], eg$Phi2[i], eg$L[i], eg$BP[i], eg$BM[i], eg$N[i])
dVM <- function (phi1, phi2, l, bp, bm, N)
{
#parameters
lp <- l #lambda plus
lm <- l #lambda minus
dt <- 0.01 #incremental time steps
nt <- 100
T <- nt/dt
r <- 1 #number of runs
a <- 1 #amplitude of stochasticity
#define variables
n <- numeric(T) #plus population density
m <- numeric(T) #minus population density
M <- numeric(T) #magnetization
x <- numeric(T) #l++ link
y <- numeric(T) #l+- link
z <- numeric(T) #l-- link
U <- array (dim = c(T, 22, 4)) #N * displacement vector array with T time steps, 22 possible interactions, 4 components
P <- matrix(nrow = T, ncol = 22) #probability matrix
S <- matrix(nrow=T, ncol=r)
#initialise variables
n[1] <- 0.5
m[1] <- 1 - n[1]
M[1] <- n[1] - m[1]
x[1] <- 5*n[1]*n[1]
z[1] <- 5*m[1]*m[1]
y[1] <- 2*5*m[1]*n[1]
L <- x[1]+y[1]+z[1] #total number of links
#set preference parameters
Bp <- bp*n[1]
Bm <- bm*m[1]
#defining a matrix sum function
# Msum <- function(a,b)
# {
#   s = 0
#   for (i in 1:22)
#   {
#     s <- s + a[i]*b[i]
#   }
#   return(s)
# } ##Note: This can be vectorized
Msum <- function(a,b)
{
sum(a*b)
}
for (i in 1:r)
{
for (t in 1:T)
{
if ((M[t] <= 1) & (M[t] >= -1) & (x[t] >= 0) & (y[t] >= 0) & (z[t] >= 0) & (x[t] <= L) & (y[t] <= L) & (z[t] <= L))
{
#first assign by width the component for each interaction
U[t, 1,] <- c(0,1,-1,0)
U[t, 2,] <- c(0,0,0,0)
U[t, 3,] <- c(0,0,0,0)
U[t, 4,] <- c(0,0,0,0)
U[t, 5,] <- c(-2*n[t], x[t]-y[t], -x[t], y[t])/n[t]
U[t, 6,] <- c(0,-1,1,0)
U[t, 7,] <- c(0,0,0,0)
U[t, 8,] <- c(-2*n[t], x[t]-y[t], -x[t], y[t])/n[t]
U[t, 9,] <- c(0,0,0,0)
U[t, 10,] <- c(0,0,0,0)
U[t, 11,] <- c(-2*n[t], x[t]-y[t], -x[t], y[t])/n[t]
U[t, 12,] <- c(0,-1,0,1)
U[t, 13,] <- c(0,0,0,0)
U[t, 14,] <- c(2*m[t], z[t]-y[t], y[t], -z[t])/m[t]
U[t, 15,] <- c(0,0,0,0)
U[t, 16,] <- c(0,0,0,0)
U[t, 17,] <- c(2*m[t], z[t]-y[t], y[t], -z[t])/m[t]
U[t, 18,] <- c(0,1,0,-1)
U[t, 19,] <- c(0,0,0,0)
U[t, 20,] <- c(0,0,0,0)
U[t, 21,] <- c(0,0,0,0)
U[t, 22,] <- c(2*m[t], z[t]-y[t], y[t], -z[t])/m[t]
#assign probabilities to each time step
P[t,1] <- (1 - Bp - Bm)*phi1*n[t]*m[t]*x[t]/(x[t]+y[t])
P[t,2] <- (1 - Bp - Bm)*phi1*n[t]**2*x[t]/(x[t]+y[t])
P[t,3] <- (1 - Bp - Bm)*(1-phi1)*n[t]*x[t]/(x[t]+y[t])
P[t,4] <- Bp*n[t]*x[t]/(x[t]+y[t])
P[t,5] <- Bm*n[t]*x[t]/(x[t]+y[t])
P[t,6] <- (1 - Bp - Bm)*phi2*n[t]**2*y[t]/(x[t]+y[t])
P[t,7] <- (1 - Bp - Bm)*phi2*n[t]*m[t]*y[t]/(x[t]+y[t])
P[t,8] <- (1 - Bp - Bm)*(1-phi2)*(1-lp)*n[t]*y[t]/(x[t]+y[t])
P[t,9] <- (1 - Bp - Bm)*(1-phi2)*lp*n[t]*y[t]/(x[t]+y[t])
P[t,10] <- Bp*y[t]/(x[t]+y[t])
P[t,11] <- Bm*y[t]/(x[t]+y[t])
P[t,12] <- (1 - Bp - Bm)*phi2*m[t]**2*y[t]/(z[t]+y[t])
P[t,13] <- (1 - Bp - Bm)*phi2*n[t]*m[t]*y[t]/(z[t]+y[t])
P[t,14] <- (1 - Bp - Bm)*(1-phi2)*(1-lm)*m[t]*y[t]/(z[t]+y[t])
P[t,15] <- (1 - Bp - Bm)*(1-phi2)*lm*m[t]*y[t]/(z[t]+y[t])
P[t,16] <-  Bm*y[t]/(z[t]+y[t])
P[t,17] <-  Bp*y[t]/(z[t]+y[t])
P[t,18] <- (1 - Bp - Bm)*phi1*n[t]*m[t]*z[t]/(z[t]+y[t])
P[t,19] <- (1 - Bp - Bm)*phi1*m[t]**2*z[t]/(z[t]+y[t])
P[t,20] <- (1 - Bp - Bm)*(1-phi1)*m[t]*z[t]/(z[t]+y[t])
P[t,21] <- Bm*m[t]*z[t]/(z[t]+y[t])
P[t,22] <- Bp*m[t]*z[t]/(z[t]+y[t])
if (t < T)
{
#displacement vector equations
M[t+1] <- M[t] + dt*Msum(U[t,,1],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,1]/N, sqrt(P[t,]))/sqrt(N)
x[t+1] <- x[t] + dt*Msum(U[t,,3],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,3]/N, sqrt(P[t,]))/sqrt(N)
y[t+1] <- y[t] + dt*Msum(U[t,,2],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,2]/N, sqrt(P[t,]))/sqrt(N)
z[t+1] <- z[t] + dt*Msum(U[t,,4],P[t,])/N + (dt**0.5)*a*rnorm(1, mean=0, sd=1)*Msum(U[t,,4]/N, sqrt(P[t,]))/sqrt(N)
n[t+1] <- (M[t+1]+1)/2
m[t+1] <- 1 - n[t+1]
}
}
else
{
if (t < T)
{
M[t+1] <- M[t]
n[t+1] <- n[t]
m[t+1] <- m[t]
x[t+1] <- x[t]
y[t+1] <- y[t]
z[t+1] <- z[t]
}
}
}
S[,i] <- M
}
return (mean(S[T,]))
}
eg <- expand.grid(
Phi1 = c(0, 0.2, 0.6),
Phi2 = c(0, 0.2, 0.6),
# varying some:
BP = seq(0, 1, by = 0.05),
BM = seq(0, 1, by = 0.05),
# holding some constant:
L = 0.3,
N = 30,
# Columns for outcomes:
out = NA
)
eg$out[i] <- dVM(eg$Phi1[i], eg$Phi2[i], eg$L[i], eg$BP[i], eg$BM[i], eg$N[i])
for (i in 1:nrow(eg))
{
eg$out[i] <- dVM(eg$Phi1[i], eg$Phi2[i], eg$L[i], eg$BP[i], eg$BM[i], eg$N[i])
}
ptm <- proc.time()
for (i in 1:100)
{
eg$out[i] <- dVM(eg$Phi1[i], eg$Phi2[i], eg$L[i], eg$BP[i], eg$BM[i], eg$N[i])
}
proc.time() - ptm
ptm <- proc.time()
eg$out <- sapply(1:100, function(i){
dVM(eg$Phi1[i], eg$Phi2[i], eg$L[i], eg$BP[i], eg$BM[i], eg$N[i])
})
proc.time() - ptm
proc.time()
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("ci")
install.packages("cli")
x <- 1:100
y <- 1:100
d <- sapply(x, function(k){})
d <- sapply(x, function(k){k*y})
View(d)
which.max(d)
d <- sapply(x, function(k){k*(y>k)})
d <- sapply(x, function(k){k*y[(y>k)]})
d <- sapply(x, function(k){k*(100-k)})
which.max(d)
length(unique(d))
x <- x/100
d <- sapply(x, function(k){k*(1-k)})
d1 <- log(d)
View(d1)
which.max(d1)
d1[50]
prod
?prod
d[50]
library(tidyverse)
wd <- "D:\\Github\\Projects\\Ongoing\\DSGRN\\cleanVersion\\SmallSample"
wd <- "D:\\Github\\Projects\\Ongoing\\DSGRN\\cleanVersion\\edgeActBased/"
wd <- "D:\\Github\\Projects\\Ongoing\\DSGRN\\cleanVersion\\edgeActBased"
d <- runif(100)
library(tidyverse)
setwd("D:/Github/Projects/SciComm/Teaching/Introduction to programming through R/codes")
setwd("../DataSets/IMDB_movies/")
library(tidyverse)
df <- read_csv("movie_metadata.csv")
dfRes <- df %>%
filter(actor_1_facebook_likes > 10000) %>%
mutate(successful = ifelse(budget < gross, "Yes", "No")) %>%
select(movie_title, actor_1_facebook_likes, successful) %>%
arrange(desc(actor_1_facebook_likes))
# How many successful movies were there?
dfRes1 <- dfRes %>%
group_by(successful) %>%
summarise(Count_succeful = n())
View(dfRes1)
# How many successful movies were there?
dfRes1 <- dfRes %>%
group_by(successful) %>%
summarise(Count_succeful = n(),
likes_mean = mean(actor_1_facebook_likes))
View(dfRes1)
# How many successful movies were there?
dfRes1 <- dfRes %>%
group_by(successful) %>%
summarise(Count_succeful = n(),
likes_mean = mean(actor_1_facebook_likes),
likes_doubled = 2*actor_1_facebook_likes)
View(dfRes1)
dfDirectors <- df %>%
group_by(director_name) %>%
summarise(Count_movies = n()) %>%
arrange(desc(Count_movies))
install.packages("markdown")
